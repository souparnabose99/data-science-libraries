# -*- coding: utf-8 -*-
"""Numpy-Operations-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QDzS0ocZRHeQDFlgCpDBn9jeAi1vkUiG
"""

import numpy as np

a = np.array([0,1,2])
a + 1

b = np.diag([1,2,3,4])
print(b * b)
print(b.dot(b))

a == (a+1)

np.array_equal(a,(a+1))

np.sin(a)

np.log(a)

np.exp(a)

# Reductions:

np.sum(a)

b = np.array([[1,1],[2,2]])
b.sum(axis=0)

b.sum(axis=1)

a.min()

a.argmin()

a.argmax()

print(np.all([True, False]))
print(np.any([True, False]))

# Axis=0 -> Col, Axis=1 -> Row
x = np.array([1,2,3,4])
y = np.array([[1,2,3],[4,5,6]])
print(x.mean())
print(np.median(x))
print(np.median(y, axis=-1))

data = np.loadtxt("/content/populations.txt")
data

x1, x2, x3, x4 = data.T
x1

data[:,1:]

data[:,1:].std(axis=0)

np.argmax(data, axis=1)

np.argmax(data, axis=0)

# Broadcasting:

a = np.tile(np.arange(0, 40, 10), (4,1))
print(a)

print("\n#####\n")

a= a.T
print(a)

a = np.tile(np.arange(0, 40, 10), (4,2))
a

a = np.tile(np.arange(0, 40, 10), (3,1))
b = np.array([0,1,2,3])
a+b

a = np.arange(0, 40, 10)
a.shape

# Converts 1D to 2D Array
a = a[:, np.newaxis]
a.shape

a+b

# Flattening:

a = np.array([[1,2,3], [4,5,6]])
a.ravel()

a.T

a

a.shape

# Reshaping:
b = a.ravel()
b.shape

b = b.reshape(2,3)
b

b[0, 0] = 100
a
# Memory location is same for both a & b for optimization

a = np.arange(4)
a.resize((8,))
a

a = np.array([[33,11,22],[55,44,66]])
print(a.sort(axis=1))
print(np.sort(a, axis=1))

np.argsort(a)

