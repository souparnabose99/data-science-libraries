# -*- coding: utf-8 -*-
"""statistical_plots.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kWJg8H6OdnLrt8NqiAp79IGstFhIlDxY
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

iris = pd.read_csv("/content/iris_csv.csv")
iris.info()

"""### Univariate Analysis :

#### Probability Distribution Function :
"""

iris.head()

sns.set(style="darkgrid")

sns.histplot(data=iris, x="sepallength", color="skyblue", label="Sepal Length", kde=True, hue="class", bins=20)
plt.legend() 
plt.show()

sns.histplot(data=iris, x="sepalwidth", color="red", label="Sepal Width", kde=True, hue="class", bins=20)
plt.legend() 
plt.show()

sns.histplot(data=iris, x="petallength", color="skyblue", label="Petal Length", kde=True, hue="class", bins=20)
plt.legend() 
plt.show()

sns.histplot(data=iris, x="petalwidth", color="skyblue", label="Petal Width", kde=True, hue="class", bins=20)
plt.legend() 
plt.show()

"""#### Cumulative Distribution Function :"""

counts, bin_edges = np.histogram(iris['petallength'], bins=10, density=True)
pdf = counts /sum(counts)
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:], pdf)
plt.plot(bin_edges[1:], cdf)

plt.show()

counts, bin_edges = np.histogram(iris[iris['class'] == 'Iris-virginica']['petallength'], bins=10, density=True)
pdf = counts /sum(counts)
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:], pdf)
plt.plot(bin_edges[1:], cdf)

plt.show()

counts, bin_edges = np.histogram(iris[iris['class'] == 'Iris-setosa']['petallength'], bins=10, density=True)
pdf = counts /sum(counts)
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:], pdf)
plt.plot(bin_edges[1:], cdf)

plt.show()

counts, bin_edges = np.histogram(iris[iris['class'] == 'Iris-versicolor']['petallength'], bins=10, density=True)
pdf = counts /sum(counts)
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:], pdf)
plt.plot(bin_edges[1:], cdf)

plt.show()

counts, bin_edges = np.histogram(iris[iris['class'] == 'Iris-setosa']['petallength'], bins=10, density=True)
pdf = counts /sum(counts)
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:], pdf)
plt.plot(bin_edges[1:], cdf)

counts, bin_edges = np.histogram(iris[iris['class'] == 'Iris-virginica']['petallength'], bins=10, density=True)
pdf = counts /sum(counts)
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:], pdf)
plt.plot(bin_edges[1:], cdf)

counts, bin_edges = np.histogram(iris[iris['class'] == 'Iris-versicolor']['petallength'], bins=10, density=True)
pdf = counts /sum(counts)
print(pdf)
print(bin_edges)

cdf = np.cumsum(pdf)
plt.plot(bin_edges[1:], pdf)
plt.plot(bin_edges[1:], cdf)

plt.show()

"""### Mean, Variance & Standard-Deviation:
Easily corrupted by outliers
"""

print("Mean Values : ")
print("Setosa : ", np.mean(iris[iris['class'] == 'Iris-setosa']['petallength']))
print("Virginica : ", np.mean(iris[iris['class'] == 'Iris-virginica']['petallength']))
print("Versicolor : ", np.mean(iris[iris['class'] == 'Iris-versicolor']['petallength']))
# Mean tells about central tendency & spread
print("Mean with outlier : ")
print(np.mean(np.append(iris[iris['class'] == 'Iris-setosa']['petallength'], 50)))

print("Standard Deviation : ")
print("Setosa : ", np.std(iris[iris['class'] == 'Iris-setosa']['petallength']))
print("Virginica : ", np.std(iris[iris['class'] == 'Iris-virginica']['petallength']))
print("Versicolor : ", np.std(iris[iris['class'] == 'Iris-versicolor']['petallength']))

"""### Median, Quantile, IQR:"""

# Middle value of a sorted dataset, in case of even no of data points, takes mean of n/2 and (n/2) +1
print("Median : ")
print("Setosa : ", np.median(iris[iris['class'] == 'Iris-setosa']['petallength']))
print("Virginica : ", np.median(iris[iris['class'] == 'Iris-virginica']['petallength']))
print("Versicolor : ", np.median(iris[iris['class'] == 'Iris-versicolor']['petallength']))
print("Median with outlier : ")
print(np.median(np.append(iris[iris['class'] == 'Iris-setosa']['petallength'], 50)))
# if more than 50% data points are corrupted, only then median gets corrupted

